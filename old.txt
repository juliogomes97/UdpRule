using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace UdpRule
{
    class Program
    {
        static bool clientConnectedToServer = true;
        static void Main(string[] args)
        {
            Console.Write("Start as server? [Y]/[N] ");
            
            string param = Console.ReadLine();

            switch(param.ToLower())
            {
                case "y":
                    StartServer();
                    break;
                default:
                    StartClient();
                    break;
            }
        }

        static void StartServer()
        {
            Server<GameObject> server = new Server<GameObject>(27000);

            // Handlers Events
            server.DatagramReceivedEvent += OnServerDatagramReceivedEvent;
            server.OnClientConnectEvent += OnServerOnClientConnectEvent;
            server.OnClientDisconectEvent += OnServerOnClientDisconectEvent;
            server.ExceptionEvent += OnServerExceptionEvent;

            server.Start();
        }
        static void StartClient()
        {
            long lastTime = 0;
            long currentTime;

            Console.Write("Name: ");
            
            string name = Console.ReadLine();

            Player player = new Player(name);

            GameObject gameObject = new GameObject(player, new Vector3(1, 2, 3));

            Client<GameObject> client = new Client<GameObject>();
            
            // Handlers Events
            client.DatagramReceivedEvent += OnClientDatagramReceivedEvent;
            client.DatagramSendEvent += OnClientDatagramSendEvent;
            client.ServerDisconnectedEvent += OnClientServerDisconnectEvent;
            client.ExceptionEvent += OnClientExceptionEvent;

            client.Connect("127.0.0.1", 27000);

            do 
            {
                Console.ReadKey();

                client.SendData(gameObject);

                /*
                 * One call per second                
                currentTime = DateTime.Now.Ticks;
                
                if(currentTime > lastTime + 1000000)
                {
                    Console.ReadKey();

                    client.SendData(gameObject);

                    lastTime = currentTime;
                }
                */
            } 
            while(clientConnectedToServer);
        }
        static void OnServerDatagramReceivedEvent(object sender, object data)
        {      
            Datagram<GameObject> datagram = (Datagram<GameObject>) data;

            string dataEncodind = Encoding.ASCII.GetString(datagram.Packet.Buffer);

            Console.WriteLine($"- Received from Address({datagram.IpEndPoint.Address}) Port({datagram.IpEndPoint.Port})");
            Console.WriteLine($"Data: {dataEncodind}");
        }        
        static void OnServerExceptionEvent(object sender, SocketException socketException)
        {
            Console.WriteLine("Server Socket Exception:");
            Console.WriteLine(socketException);
            Console.WriteLine(sender);
        }
        static void OnServerOnClientConnectEvent(object sender, object data)
        {
            GameObject gameObject = (GameObject) data;

            Console.WriteLine($"{gameObject.Player.Name} is Added!");
        }
        static void OnServerOnClientDisconectEvent(object sender, object data)
        {
            Packet<GameObject> gameObject = (Packet<GameObject>) data;

            Console.WriteLine($"{gameObject.PacketDeserialize().Player.Name} as disconected!");
        }
        static void OnClientDatagramReceivedEvent(object sender, object data)
        {
            Packet<ClientPacket<GameObject>> packet = (Packet<ClientPacket<GameObject>>) data;

            string dataEncodind = Encoding.ASCII.GetString(packet.Buffer);

            Console.WriteLine($"- Received from server:");
            Console.WriteLine($"Data: {dataEncodind}");
        }
        static void OnClientDatagramSendEvent(object sender, object data)
        {
            Packet<GameObject> packet = (Packet<GameObject>) data;

            string dataEncodind = Encoding.ASCII.GetString(packet.Buffer);

            Console.WriteLine($"Sent data to server.");
        }
        static void OnClientServerDisconnectEvent(object sender, EventArgs e)
        {
            clientConnectedToServer = false;

            Console.WriteLine("Server is down!");
        }
        static void OnClientExceptionEvent(object sender, SocketException socketException)
        {
            Console.WriteLine($"Server Socket Exception({socketException.ErrorCode})");
            //Console.WriteLine(socketException);
        }
    }
}
